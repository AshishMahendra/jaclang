module = DOC_STRING, {element};

element = ability
          | architype
          | include_stmt
          | import_stmt
          | mod_code
          | test
          | global_var;

global_var = [DOC_STRING], (KW_FREEZE | KW_GLOBAL), [access_tag], assignment_list, SEMI;

access = KW_PROT
         | KW_PUB
         | KW_PRIV;

access_tag = COLON, access;

test = [DOC_STRING], KW_TEST, NAME, multistring, code_block;

mod_code = [DOC_STRING], KW_WITH, KW_ENTER, code_block;

import_stmt = KW_IMPORT, sub_name, (KW_FROM, import_path, COMMA, import_items, SEMI | import_path, KW_AS, NAME, SEMI | import_path, SEMI);
include_stmt = KW_INCLUDE, sub_name, import_path, SEMI;
import_path = (import_path_prefix, import_path_tail | import_path_prefix);
import_path_prefix = DOT, DOT, NAME | DOT, NAME | NAME;
import_path_tail = import_path_tail, DOT, NAME | DOT, NAME;
import_items = (import_items, COMMA, (NAME, KW_AS, NAME | NAME) | NAME, KW_AS, NAME | NAME);
architype = architype_def | architype_decl;
architype_decl = [DOC_STRING], (decorators | ε), arch_type, [access_tag], NAME, inherited_archs, (member_block | SEMI);
architype_def = [DOC_STRING], (dotted_name | ε), strict_arch_ref, member_block;
arch_type = KW_WALKER | KW_OBJECT | KW_EDGE | KW_NODE;
decorators = decorators, DECOR_OP, atom | DECOR_OP, atom;
inherited_archs = (inherited_archs, sub_name_dotted | ε);
sub_name = COLON, NAME;
sub_name_dotted = COLON, dotted_name;
dotted_name = dotted_name, DOT, (NAME | all_refs) | NAME | all_refs;
all_refs = global_ref | visitor_ref | here_ref | arch_ref;
ability = ability_def | ability_decl;
ability_decl = ability_decl_decor | [DOC_STRING], (static_tag | ε), KW_CAN, [access_tag], NAME, (func_decl, [code_block] | event_clause, [code_block]);
ability_decl_decor = [DOC_STRING], (KW_STATIC, decorators | decorators), KW_CAN, [access_tag], NAME, (func_decl, [code_block] | event_clause, [code_block]);
ability_def = [DOC_STRING], (dotted_name | ε), ability_ref, (func_decl, code_block | event_clause, code_block);
event_clause = KW_WITH, (STAR_MUL, (KW_EXIT | KW_ENTER) | name_list, (KW_EXIT | KW_ENTER) | KW_EXIT | KW_ENTER), return_type_tag | return_type_tag;
static_tag = KW_STATIC | ε;
name_list = name_list, COMMA, dotted_name | dotted_name;
func_decl = LPAREN, (func_decl_param_list | ε), RPAREN, return_type_tag;
func_decl_param_list = func_decl_param_list, COMMA, param_var | param_var;
param_var = (STAR_POW | STAR_MUL | ε), NAME, type_tag, [EQ, expression];
member_block = LBRACE, [member_stmt_list], RBRACE;
member_stmt_list = member_stmt_list, member_stmt | member_stmt;
member_stmt = ability | has_stmt;
has_stmt = [DOC_STRING], (static_tag | ε), (KW_FREEZE | KW_HAS), [access_tag], has_assign_clause, SEMI;
has_assign_clause = has_assign_clause, COMMA, typed_has_clause | typed_has_clause;
typed_has_clause = NAME, type_tag, [EQ, expression];
type_tag = COLON, type_name;
return_type_tag = (RETURN_HINT, type_name | ε);
type_name = TYP_DICT, LSQUARE, type_name, COMMA, type_name, RSQUARE | TYP_LIST, LSQUARE, type_name, RSQUARE | dotted_name | NULL | builtin_type;
builtin_type = TYP_TYPE | TYP_ANY | TYP_BOOL | TYP_DICT | TYP_SET | TYP_TUPLE | TYP_LIST | TYP_FLOAT | TYP_INT | TYP_BYTES | TYP_STRING;
code_block = LBRACE, [statement_list], RBRACE;
statement_list = statement_list, statement | statement;
statement = walker_stmt, SEMI | yield_stmt, SEMI | return_stmt, SEMI | report_stmt, SEMI | delete_stmt, SEMI | ctrl_stmt, SEMI | assert_stmt, SEMI | raise_stmt, SEMI | while_stmt | for_stmt | try_stmt | if_stmt | expression, SEMI | static_assignment | assignment, SEMI | ability_decl | architype_decl;
if_stmt = KW_IF, expression, code_block, [elif_list, else_stmt];
elif_list = elif_list, KW_ELIF, expression, code_block | KW_ELIF, expression, code_block;
else_stmt = KW_ELSE, code_block;
try_stmt = KW_TRY, code_block, (except_list, [finally_stmt] | [finally_stmt]);
except_list = except_list, except_def | except_def;
except_def = KW_EXCEPT, expression, [(KW_AS, NAME)], code_block;
finally_stmt = KW_FINALLY, code_block;
for_stmt = KW_FOR, NAME, [(COMMA, NAME)], KW_IN, expression, code_block;
while_stmt = KW_WHILE, expression, code_block;
raise_stmt = KW_RAISE, [expression];
assert_stmt = KW_ASSERT, expression, [COMMA, expression];
ctrl_stmt = KW_SKIP | KW_BREAK | KW_CONTINUE;
delete_stmt = KW_DELETE, expression;
report_stmt = KW_REPORT, expression;
return_stmt = KW_RETURN, [expression];
yield_stmt = KW_YIELD, [expression];
walker_stmt = (sync_stmt | disengage_stmt | revisit_stmt | visit_stmt | ignore_stmt), SEMI;
ignore_stmt = KW_IGNORE, expression;
visit_stmt = KW_VISIT, (sub_name_dotted | ε), expression, [else_stmt];
revisit_stmt = KW_REVISIT, [expression], [else_stmt];
disengage_stmt = KW_DISENGAGE;
sync_stmt = KW_SYNC, expression;
assignment = [(KW_FREEZE)], atom, EQ, expression;
static_assignment = KW_HAS, assignment_list, SEMI;
expression = pipe, [(KW_IF, expression, KW_ELSE, expression)];
pipe = (spawn_ctx | pipe_back), [(PIPE_FWD, (spawn_ctx | filter_ctx | pipe))];
pipe_back = (spawn_ctx | elvis_check), [(PIPE_BKWD, (spawn_ctx | filter_ctx | pipe_back))];
elvis_check = bitwise_or, [(ELVIS_OP, elvis_check)];
bitwise_or = bitwise_xor, [(BW_OR, bitwise_or)];
bitwise_xor = bitwise_and, [(BW_XOR, bitwise_and)];
bitwise_and = shift, [(BW_AND, bitwise_and)];
shift = logical, [(RSHIFT | LSHIFT, shift)];
logical = [(NOT)], compare, [(KW_OR | KW_AND, logical)];
compare = arithmetic, [(cmp_op, compare)];
arithmetic = term, [(PLUS | MINUS, arithmetic)];
term = factor, [(STAR_MUL | FLOOR_DIV | DIV | MOD, term)];
factor = [(PLUS | MINUS | BW_NOT)], power;
power = connect, [(STAR_POW, power)];
connect = spawn_object, [(connect_op | disconnect_op, connect)];
spawn_object = [(spawn_op)], (unpack | atom);
unpack = [(STAR_MUL | STAR_POW)], atom;
ref = [(BW_AND)], ds_call;
ds_call = [(PIPE_FWD)], walrus_assign;
walrus_assign = atom, [(walrus_op, walrus_assign)];
walrus_op = RSHIFT_EQ | LSHIFT_EQ | BW_NOT_EQ | BW_XOR_EQ | BW_OR_EQ | BW_AND_EQ | MOD_EQ | DIV_EQ | FLOOR_DIV_EQ | MUL_EQ | SUB_EQ | ADD_EQ | WALRUS_EQ;
cmp_op = KW_ISN | KW_IS | KW_NIN | KW_IN | NE | GTE | LTE | GT | LT | EE;
spawn_op = SPAWN_OP | KW_SPAWN;
atom = (edge_op_ref | all_refs | atomic_chain | LPAREN, expression, RPAREN | atom_collection | atom_literal);
atom_literal = (builtin_type | NAME | NULL | BOOL | multistring | FLOAT | OCT | BIN | HEX | INT);
atom_collection = (dict_compr | list_compr | dict_val | list_val);
multistring = (FSTRING | STRING), [(FSTRING | STRING)];
list_val = LSQUARE, [expr_list], RSQUARE;
expr_list = expr_list, COMMA, expression | expression;
dict_val = LBRACE, [kv_pairs], RBRACE;
list_compr = LSQUARE, expression, KW_FOR, NAME, KW_IN, walrus_assign, [(KW_IF, expression)], RSQUARE;
dict_compr = LBRACE, expression, COLON, expression, KW_FOR, NAME, [(COMMA, NAME)], KW_IN, walrus_assign, [(KW_IF, expression)], RBRACE;
kv_pairs = kv_pairs, COMMA, expression, COLON, expression | expression, COLON, expression;
atomic_chain = atomic_call | atomic_chain_unsafe | atomic_chain_safe;
atomic_chain_unsafe = atom, (arch_ref | index_slice | DOT, NAME);
atomic_chain_safe = atom, NULL_OK, (arch_ref | index_slice | DOT, NAME);
atomic_call = atom, func_call_tail;
func_call_tail = LPAREN, [param_list], RPAREN;
param_list = (expr_list, [(COMMA, assignment_list)] | assignment_list);
assignment_list = assignment_list, COMMA, assignment | assignment;
index_slice = LSQUARE, expression, [(COLON, expression)], RSQUARE;
global_ref = GLOBAL_OP, NAME;
here_ref = HERE_OP;
visitor_ref = VISITOR_OP;
arch_ref = ability_ref | object_ref | walker_ref | edge_ref | node_ref;
strict_arch_ref = object_ref | walker_ref | edge_ref | node_ref;
node_ref = NODE_OP, NAME;
edge_ref = EDGE_OP, NAME;
walker_ref = WALKER_OP, NAME;
object_ref = OBJECT_OP, NAME;
ability_ref = ABILITY_OP, NAME;
edge_op_ref = edge_any | edge_from | edge_to;
edge_to = ARROW_R, [(ARROW_R_p1, expression, ARROW_R_p2)];
edge_from = ARROW_L, [(ARROW_L_p1, expression, ARROW_L_p2)];
edge_any = ARROW_BI, [(ARROW_L_p1, expression, ARROW_R_p2)];
connect_op = connect_any | connect_from | connect_to;
disconnect_op = NOT, edge_op_ref;
connect_to = CARROW_R, [(CARROW_R_p1, expression, CARROW_R_p2)];
connect_from = CARROW_L, [(CARROW_L_p1, expression, CARROW_L_p2)];
connect_any = CARROW_BI, [(CARROW_L_p1, expression, CARROW_R_p2)];
filter_ctx = LBRACE, EQ, filter_compare_list, RBRACE;
spawn_ctx = LBRACE, param_list, RBRACE;
filter_compare_list = filter_compare_list, COMMA, NAME, cmp_op, expression | NAME, cmp_op, expression;
empty = ε;
