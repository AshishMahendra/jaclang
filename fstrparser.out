Grammar:

Rule 0     S' -> fstring
Rule 1     fstring -> STRING_START fstr_parts STRING_END
Rule 2     fstr_parts -> fstring
Rule 3     fstr_parts -> fstr_expr
Rule 4     fstr_parts -> PIECE
Rule 5     fstr_parts -> fstr_parts PIECE
Rule 6     fstr_parts -> fstr_parts fstr_expr
Rule 7     fstr_expr -> EXPR_START fstr_parts EXPR_END

Terminals, with rules where they appear:

EXPR_END             : 7
EXPR_START           : 7
PIECE                : 4 5
STRING_END           : 1
STRING_START         : 1
error                :

Nonterminals, with rules where they appear:

fstr_expr            : 3 6
fstr_parts           : 1 5 6 7
fstring              : 2 0


state 0

    (0) S' -> . fstring
    (1) fstring -> . STRING_START fstr_parts STRING_END
    STRING_START    shift and go to state 2

    fstring                        shift and go to state 1

state 1

    (0) S' -> fstring .


state 2

    (1) fstring -> STRING_START . fstr_parts STRING_END
    (2) fstr_parts -> . fstring
    (3) fstr_parts -> . fstr_expr
    (4) fstr_parts -> . PIECE
    (5) fstr_parts -> . fstr_parts PIECE
    (6) fstr_parts -> . fstr_parts fstr_expr
    (1) fstring -> . STRING_START fstr_parts STRING_END
    (7) fstr_expr -> . EXPR_START fstr_parts EXPR_END
    PIECE           shift and go to state 6
    STRING_START    shift and go to state 2
    EXPR_START      shift and go to state 7

    fstr_parts                     shift and go to state 3
    fstring                        shift and go to state 4
    fstr_expr                      shift and go to state 5

state 3

    (1) fstring -> STRING_START fstr_parts . STRING_END
    (5) fstr_parts -> fstr_parts . PIECE
    (6) fstr_parts -> fstr_parts . fstr_expr
    (7) fstr_expr -> . EXPR_START fstr_parts EXPR_END
    STRING_END      shift and go to state 8
    PIECE           shift and go to state 9
    EXPR_START      shift and go to state 7

    fstr_expr                      shift and go to state 10

state 4

    (2) fstr_parts -> fstring .
    STRING_END      reduce using rule 2 (fstr_parts -> fstring .)
    PIECE           reduce using rule 2 (fstr_parts -> fstring .)
    EXPR_START      reduce using rule 2 (fstr_parts -> fstring .)
    EXPR_END        reduce using rule 2 (fstr_parts -> fstring .)


state 5

    (3) fstr_parts -> fstr_expr .
    STRING_END      reduce using rule 3 (fstr_parts -> fstr_expr .)
    PIECE           reduce using rule 3 (fstr_parts -> fstr_expr .)
    EXPR_START      reduce using rule 3 (fstr_parts -> fstr_expr .)
    EXPR_END        reduce using rule 3 (fstr_parts -> fstr_expr .)


state 6

    (4) fstr_parts -> PIECE .
    STRING_END      reduce using rule 4 (fstr_parts -> PIECE .)
    PIECE           reduce using rule 4 (fstr_parts -> PIECE .)
    EXPR_START      reduce using rule 4 (fstr_parts -> PIECE .)
    EXPR_END        reduce using rule 4 (fstr_parts -> PIECE .)


state 7

    (7) fstr_expr -> EXPR_START . fstr_parts EXPR_END
    (2) fstr_parts -> . fstring
    (3) fstr_parts -> . fstr_expr
    (4) fstr_parts -> . PIECE
    (5) fstr_parts -> . fstr_parts PIECE
    (6) fstr_parts -> . fstr_parts fstr_expr
    (1) fstring -> . STRING_START fstr_parts STRING_END
    (7) fstr_expr -> . EXPR_START fstr_parts EXPR_END
    PIECE           shift and go to state 6
    STRING_START    shift and go to state 2
    EXPR_START      shift and go to state 7

    fstr_parts                     shift and go to state 11
    fstring                        shift and go to state 4
    fstr_expr                      shift and go to state 5

state 8

    (1) fstring -> STRING_START fstr_parts STRING_END .
    $end            reduce using rule 1 (fstring -> STRING_START fstr_parts STRING_END .)
    STRING_END      reduce using rule 1 (fstring -> STRING_START fstr_parts STRING_END .)
    PIECE           reduce using rule 1 (fstring -> STRING_START fstr_parts STRING_END .)
    EXPR_START      reduce using rule 1 (fstring -> STRING_START fstr_parts STRING_END .)
    EXPR_END        reduce using rule 1 (fstring -> STRING_START fstr_parts STRING_END .)


state 9

    (5) fstr_parts -> fstr_parts PIECE .
    STRING_END      reduce using rule 5 (fstr_parts -> fstr_parts PIECE .)
    PIECE           reduce using rule 5 (fstr_parts -> fstr_parts PIECE .)
    EXPR_START      reduce using rule 5 (fstr_parts -> fstr_parts PIECE .)
    EXPR_END        reduce using rule 5 (fstr_parts -> fstr_parts PIECE .)


state 10

    (6) fstr_parts -> fstr_parts fstr_expr .
    STRING_END      reduce using rule 6 (fstr_parts -> fstr_parts fstr_expr .)
    PIECE           reduce using rule 6 (fstr_parts -> fstr_parts fstr_expr .)
    EXPR_START      reduce using rule 6 (fstr_parts -> fstr_parts fstr_expr .)
    EXPR_END        reduce using rule 6 (fstr_parts -> fstr_parts fstr_expr .)


state 11

    (7) fstr_expr -> EXPR_START fstr_parts . EXPR_END
    (5) fstr_parts -> fstr_parts . PIECE
    (6) fstr_parts -> fstr_parts . fstr_expr
    (7) fstr_expr -> . EXPR_START fstr_parts EXPR_END
    EXPR_END        shift and go to state 12
    PIECE           shift and go to state 9
    EXPR_START      shift and go to state 7

    fstr_expr                      shift and go to state 10

state 12

    (7) fstr_expr -> EXPR_START fstr_parts EXPR_END .
    STRING_END      reduce using rule 7 (fstr_expr -> EXPR_START fstr_parts EXPR_END .)
    PIECE           reduce using rule 7 (fstr_expr -> EXPR_START fstr_parts EXPR_END .)
    EXPR_START      reduce using rule 7 (fstr_expr -> EXPR_START fstr_parts EXPR_END .)
    EXPR_END        reduce using rule 7 (fstr_expr -> EXPR_START fstr_parts EXPR_END .)
