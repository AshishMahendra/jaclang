[1mdiff --git a/jaclang/core/impl/element_impl.jac b/jaclang/core/impl/element_impl.jac[m
[1mindex 9694c8a..a6aeaae 100644[m
[1m--- a/jaclang/core/impl/element_impl.jac[m
[1m+++ b/jaclang/core/impl/element_impl.jac[m
[36m@@ -68,4 +68,28 @@[m
 (caller_id: UUID) {[m
     caller_id |> <self>.ro_access.discard;[m
     caller_id |> <self>.rw_access.discard;[m
[31m-}[m
\ No newline at end of file[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m:object:Object:ability:_jac_on_enter[m
[32m+[m[32m(triggers: list) {[m
[32m+[m[32m    can decorator(func: callable) -> callable {[m
[32m+[m[32m        <self>._jac_ds_entry_funcs.append({'types': triggers, 'func': func});[m
[32m+[m[32m        can wrapper(*args: list, **kwargs: dict) -> callable {[m
[32m+[m[32m            return func(*args, **kwargs);[m
[32m+[m[32m        }[m
[32m+[m[32m        return wrapper;[m
[32m+[m[32m    }[m
[32m+[m[32m    return decorator;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m:object:Object:ability:_jac_on_exit[m
[32m+[m[32m(triggers: list) {[m
[32m+[m[32m    can decorator(func: callable) -> callable {[m
[32m+[m[32m        <self>._jac_ds_exit_funcs.append({'types': triggers, 'func': func});[m
[32m+[m[32m        can wrapper(*args: list, **kwargs: dict) -> callable {[m
[32m+[m[32m            return func(*args, **kwargs);[m
[32m+[m[32m        }[m
[32m+[m[32m        return wrapper;[m
[32m+[m[32m    }[m
[32m+[m[32m    return decorator;[m
[32m+[m[32m}[m
[1mdiff --git a/jaclang/core/primitives.jac b/jaclang/core/primitives.jac[m
[1mindex 4148df4..6976c64 100644[m
[1m--- a/jaclang/core/primitives.jac[m
[1m+++ b/jaclang/core/primitives.jac[m
[36m@@ -64,8 +64,15 @@[m [mobject Element {[m
 }[m
 [m
 object Object:Element {[m
[32m+[m[32m    static[m
     has _jac_ds_entry_funcs: list[dict]=[],[m
         _jac_ds_exit_funcs: list[dict]=[];[m
[32m+[m
[32m+[m[32m    static[m
[32m+[m[32m    can _jac_on_enter(triggers: list[type]);[m
[32m+[m
[32m+[m[32m    static[m
[32m+[m[32m    can _jac_on_exit(triggers: list[type]);[m
 }[m
 [m
 object Node:Object {[m
[1mdiff --git a/jaclang/jac/absyntree.py b/jaclang/jac/absyntree.py[m
[1mindex c136256..edbe2e2 100644[m
[1m--- a/jaclang/jac/absyntree.py[m
[1m+++ b/jaclang/jac/absyntree.py[m
[36m@@ -26,19 +26,6 @@[m [mclass AstNode:[m
         self._typ: type = type(None)[m
         self.meta: dict = {}[m
 [m
[31m-    # def __str__(self) -> str:[m
[31m-    #     """Return string representation of node."""[m
[31m-    #     kid = vars(self).copy()[m
[31m-    #     del kid["parent"][m
[31m-    #     return ([m
[31m-    #         f"{str(type(self).__name__)}->[{self.line},{len(self.kid)} kids]:"[m
[31m-    #         f"{pprint.pformat(kid, indent=2, depth=1)}"[m
[31m-    #     )[m
[31m-[m
[31m-    # def __repr__(self) -> str:[m
[31m-    #     """Return string representation of node."""[m
[31m-    #     return str(self)[m
[31m-[m
     def to_dict(self) -> dict:[m
         """Return dict representation of node."""[m
         ret = {[m
[36m@@ -390,10 +377,10 @@[m [mclass Architype(OOPAccessNode):[m
         name: Name,[m
         arch_type: Token,[m
         doc: Optional[Token],[m
[31m-        decorators: Optional["Decorators"],[m
[32m+[m[32m        decorators: Optional[Decorators],[m
         access: Optional[Token],[m
[31m-        base_classes: "BaseClasses",[m
[31m-        body: Optional["ArchBlock"],[m
[32m+[m[32m        base_classes: BaseClasses,[m
[32m+[m[32m        body: Optional[ArchBlock],[m
         parent: Optional[AstNode],[m
         mod_link: Optional[Module],[m
         kid: list[AstNode],[m
[1mdiff --git a/jaclang/jac/passes/blue/blue_pygen_pass.py b/jaclang/jac/passes/blue/blue_pygen_pass.py[m
[1mindex 8f1c0c6..7f959fe 100644[m
[1m--- a/jaclang/jac/passes/blue/blue_pygen_pass.py[m
[1m+++ b/jaclang/jac/passes/blue/blue_pygen_pass.py[m
[36m@@ -345,6 +345,7 @@[m [mclass BluePygenPass(Pass):[m
         for i in node.members:[m
             if type(i) == ast.Ability and i.name.value == Con.INIT_FUNC:[m
                 init_func = i[m
[32m+[m[32m                break[m
         if init_func and init_func.is_func:[m
             self.emit_ln([m
                 node, f"def __init__(self{init_func.signature.meta['py_code']}:"[m
[36m@@ -1091,14 +1092,14 @@[m [mclass BluePygenPass(Pass):[m
             if type(node.right) == ast.IndexSlice:[m
                 self.emit([m
                     node,[m
[31m-                    f"{node.target.meta['py_code']}{node.right.meta['py_code']} "[m
[31m-                    f"if {node.target.meta['py_code']} is not None else None",[m
[32m+[m[32m                    f"({node.target.meta['py_code']}{node.right.meta['py_code']} "[m
[32m+[m[32m                    f"if {node.target.meta['py_code']} is not None else None)",[m
                 )[m
             else:[m
                 self.emit([m
                     node,[m
[31m-                    f"{node.target.meta['py_code']}.{node.right.meta['py_code']} "[m
[31m-                    f"if {node.target.meta['py_code']} is not None else None",[m
[32m+[m[32m                    f"({node.target.meta['py_code']}.{node.right.meta['py_code']} "[m
[32m+[m[32m                    f"if {node.target.meta['py_code']} is not None else None)",[m
                 )[m
         else:[m
             if type(node.right) == ast.IndexSlice:[m
[1mdiff --git a/jaclang/jac/passes/purple/impl/purple_pygen_pass_impl.jac b/jaclang/jac/passes/purple/impl/purple_pygen_pass_impl.jac[m
[1mindex 9a99dbd..0e915da 100644[m
[1m--- a/jaclang/jac/passes/purple/impl/purple_pygen_pass_impl.jac[m
[1m+++ b/jaclang/jac/passes/purple/impl/purple_pygen_pass_impl.jac[m
[36m@@ -82,14 +82,24 @@[m [march_attached: Optional["ArchBlock"] = None,[m
 """[m
 :object:PurplePygenPass:ability:exit_ability[m
 (nd: ast.Ability) {[m
[32m+[m[32m    "Object" |> <self>.add_element_import;[m
     if nd.decorators {[m
         (nd, nd.decorators.meta["py_code"]) |> <self>.emit_ln;[m
     }[m
[31m-    if (nd.signature|>type) in [ast.FuncSignature, ast.EventSignature] {[m
[32m+[m[32m    if nd.signature:>type in [ast.FuncSignature, ast.EventSignature] {[m
         if nd.arch_attached {[m
[32m+[m[32m            if nd.signature:>type == ast.EventSignature and[m[41m [m
[32m+[m[32m                nd.signature.event.name == Tok.KW_ENTER {[m
[32m+[m[32m                type_list = nd.signature.arch_tag_info?.meta["py_code"] ?: "";[m
[32m+[m[32m                (nd, f"@{C.OBJECT_CLASS}._jac_on_enter([{type_list.replace('|', ', ')}])") |> <self>.emit_ln;[m
[32m+[m[32m            }[m[41m      [m
[32m+[m[32m            elif nd.signature:>type == ast.EventSignature and[m[41m [m
[32m+[m[32m                nd.signature.event.name == Tok.KW_EXIT {[m
[32m+[m[32m                type_list = nd.signature.arch_tag_info?.meta["py_code"] ?: "";[m
[32m+[m[32m                (nd, f"@@{C.OBJECT_CLASS}._jac_on_exit([{type_list.replace('|', ', ')}])") |> <self>.emit_ln;[m
[32m+[m[32m            }[m[41m      [m
             (nd, f"def {nd.name.meta['py_code']}(self{nd.signature.meta['py_code']}:")[m
                 |> <self>.emit_ln;[m
[31m-            # (nd, "1/0", indent_delta=1) |> <self>.emit_ln;[m
         } else {[m
             (nd, f"def {nd.name.meta['py_code']}({nd.signature.meta['py_code']}:")[m
                 |> <self>.emit_ln;[m
